{"list_of_files":[{"kind":"file","path":"numpy/linalg/_linalg.py","funcs":[{"kind":"func","name":"isComplexType","signature":"def isComplexType(t)","tags":["type","complex","check"],"returns":["boolean"],"description":"checks if the value is of a complex form","file_path":"numpy/linalg/_linalg.py:L122"},{"kind":"func","name":"transpose","signature":"def transpose(a)","tags":["conversion","matrix"],"returns":["ndarray"],"description":"Transpose each matrix in a stack of matrices.","file_path":"numpy/linalg/_linalg.py:L208"},{"kind":"func","name":"","signature":"def tensorsolve(a, b, axes=None)","tags":["solve","tensor","equation","axes reorder"],"returns":[],"description":"Solve the tensor equation ``a x = b`` for x.","file_path":"numpy/linalg/_linalg.py:L232"},{"kind":"func","name":"","signature":"def solve(a, b)","tags":["solve","linear equation","matrix"],"returns":[],"description":"Solve a linear matrix equation, or system of linear scalar equations.","file_path":"numpy/linalg/_linalg.py:L313"},{"kind":"func","name":"","signature":"def tensorinv(a, ind=2)","tags":["compute","tensor","inverse","ndarray"],"returns":[],"description":"Compute the 'inverse' of an N-dimensional array.","file_path":"numpy/linalg/_linalg.py:L405"},{"kind":"func","name":"","signature":"def inv(a)","tags":["compute","inverse","matrix"],"returns":[],"description":"Compute the inverse of a matrix.","file_path":"numpy/linalg/_linalg.py:L479"},{"kind":"func","name":"matrix_power","signature":"def matrix_power(a)","tags":["exponent","matrix","square"],"returns":["matrix"],"description":"Raise a square matrix to the (integer) power `n`.","file_path":"numpy/linalg/_linalg.py:L602"},{"kind":"func","name":"","signature":"def matrix_power(a, n)","tags":["matrix","power","exponentiation","square matrix","numerical inversion"],"returns":[],"description":"Raise a square matrix to the (integer) power `n`.","file_path":"numpy/linalg/_linalg.py:L602"},{"kind":"func","name":"","signature":"def cholesky(a)","tags":["decompose","cholesky","hermitian","positive-definite","matrix"],"returns":[],"description":"Cholesky decomposition.","file_path":"numpy/linalg/_linalg.py:L721"},{"kind":"func","name":"","signature":"def qr(a, mode='reduced')","tags":["compute","qr factorization","matrix","decomposition"],"returns":[],"description":"Compute the qr factorization of a matrix.","file_path":"numpy/linalg/_linalg.py:L823"},{"kind":"func","name":"","signature":"def eigvals(a)","tags":["compute","eigenvalues","matrix"],"returns":[],"description":"Compute the eigenvalues of a general matrix.","file_path":"numpy/linalg/_linalg.py:L1030"},{"kind":"func","name":"","signature":"def eigvalsh(a, UPLO='L')","tags":["compute","eigenvalues","hermitian","matrix","diagonalization"],"returns":[],"description":"Compute the eigenvalues of a complex Hermitian or real symmetric matrix.","file_path":"numpy/linalg/_linalg.py:L1128"},{"kind":"func","name":"eig","signature":"def eig(a)","tags":["eigenvalue","matrix"],"returns":["tuple","array"],"description":"Compute the eigenvalues and right eigenvectors of a square array.","file_path":"numpy/linalg/_linalg.py:L1232"},{"kind":"func","name":"","signature":"def eigh(a, UPLO='L')","tags":["eigenvalues","eigenvectors","hermitian","symmetric","matrix"],"returns":[],"description":"Return the eigenvalues and eigenvectors of a complex Hermitian","file_path":"numpy/linalg/_linalg.py:L1388"},{"kind":"func","name":"","signature":"def svd(a, full_matrices=True, compute_uv=True, hermitian=False)","tags":["svd","singular value decomposition","matrix","decomposition"],"returns":[],"description":"Singular Value Decomposition.","file_path":"numpy/linalg/_linalg.py:L1542"},{"kind":"func","name":"","signature":"def cond(x, p=None)","tags":["compute","condition number","matrix","norm"],"returns":[],"description":"Compute the condition number of a matrix.","file_path":"numpy/linalg/_linalg.py:L1749"},{"kind":"func","name":"","signature":"def matrix_rank(A, tol=None, hermitian=False)","tags":["matrix","rank","svd method","singular values","hermitian"],"returns":[],"description":"Return matrix rank of array using SVD method","file_path":"numpy/linalg/_linalg.py:L1873"},{"kind":"func","name":"","signature":"def pinv(a, rcond=1e-15, hermitian=False)","tags":["compute","pseudo-inverse","matrix","singular-value decomposition"],"returns":[],"description":"Compute the (Moore-Penrose) pseudo-inverse of a matrix.","file_path":"numpy/linalg/_linalg.py:L1988"},{"kind":"func","name":"","signature":"def slogdet(a)","tags":["compute","slogdet","determinant","array manipulation","matrix"],"returns":[],"description":"Compute the sign and (natural) logarithm of the determinant of an array.","file_path":"numpy/linalg/_linalg.py:L2089"},{"kind":"func","name":"","signature":"def det(a)","tags":["compute","determinant","array","det","matrix"],"returns":[],"description":"Compute the determinant of an array.","file_path":"numpy/linalg/_linalg.py:L2179"},{"kind":"func","name":"","signature":"def norm(x, ord=None, axis=None, keepdims=False)","tags":["matrix","norm","vector norm","array manipulation"],"returns":[],"description":"Matrix or vector norm.","file_path":"numpy/linalg/_linalg.py:L2440"},{"kind":"func","name":"","signature":"def multi_dot(arrays, *, out=None)","tags":["matrix","multiply","optimization","dot product","array manipulation"],"returns":[],"description":"Compute the dot product of two or more arrays in a single function call,","file_path":"numpy/linalg/_linalg.py:L2707"},{"kind":"func","name":"","signature":"def diagonal(x, /, *, offset=0)","tags":["extract-diagonals","matrix","offset-diagonal","array"],"returns":[],"description":"Returns specified diagonals of a matrix (or a stack of matrices) ``x``.","file_path":"numpy/linalg/_linalg.py:L2909"},{"kind":"func","name":"","signature":"def trace(x, /, *, offset=0, dtype=None)","tags":["sum","diagonals","matrix","array"],"returns":[],"description":"Returns the sum along the specified diagonals of a matrix","file_path":"numpy/linalg/_linalg.py:L2952"}]},{"kind":"file","path":"numpy/polynomial/polynomial.py","funcs":[{"kind":"func","name":"polyline","signature":"def polyline(off, sc1)","tags":["polynomial","array","linear"],"returns":["array"],"description":"Returns an array representing a linear polynomial.","file_path":"numpy/polynomial/polynomial.py:L113"},{"kind":"func","name":"","signature":"def polyline(off, scl)","tags":["polynomial"," linear"," array manipulation"],"returns":[],"description":"Returns an array representing a linear polynomial.","file_path":"numpy/polynomial/polynomial.py:L113"},{"kind":"func","name":"","signature":"def polyfromroots(roots)","tags":["polynomial","roots","coefficient","array"],"returns":[],"description":"Generate a monic polynomial with given roots.","file_path":"numpy/polynomial/polynomial.py:L151"},{"kind":"func","name":"polyadd","signature":"def polyadd(c1, c2)","tags":["polynomial","add"],"returns":["polynomial"],"description":"Add one polynomial by another.","file_path":"numpy/polynomial/polynomial.py:L215"},{"kind":"func","name":"","signature":"def polysub(c1, c2)","tags":["polynomial","subtraction","array"],"returns":[],"description":"Subtract one polynomial from another.","file_path":"numpy/polynomial/polynomial.py:L251"},{"kind":"func","name":"","signature":"def polymulx(c)","tags":["polynomial","multiply","array"],"returns":[],"description":"","file_path":"numpy/polynomial/polynomial.py:L288"},{"kind":"func","name":"polymul","signature":"def polymul(c1, c2)","tags":["polynomial","multiply"],"returns":["polynomial"],"description":"Multiply one polynomial by another.","file_path":"numpy/polynomial/polynomial.py:L328"},{"kind":"func","name":"polydiv","signature":"def polydiv(c1, c2)","tags":["polynomial","divide"],"returns":["polynomial"],"description":"Divide one polynomial by another.","file_path":"numpy/polynomial/polynomial.py:L366"},{"kind":"func","name":"polypow","signature":"def polypow(c, pow, maxpower)","tags":["polynomial","power","exponent"],"returns":["polynomial"],"description":"Raise a polynomial to a power..","file_path":"numpy/polynomial/polynomial.py:L424"},{"kind":"func","name":"","signature":"def polyder(c, m=1, scl=1, axis=0)","tags":["polynomial","differentiation","coefficients","array"],"returns":[],"description":"Differentiate a polynomial.","file_path":"numpy/polynomial/polynomial.py:L463"},{"kind":"func","name":"","signature":"def polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0)","tags":["polynomial","integration","coefficients","array"],"returns":[],"description":"Integrate a polynomial.","file_path":"numpy/polynomial/polynomial.py:L545"},{"kind":"func","name":"","signature":"def polyval(x, c, tensor=True)","tags":["polynomial","evaluate","coefficient"],"returns":[],"description":"Evaluate a polynomial at points x.","file_path":"numpy/polynomial/polynomial.py:L664"},{"kind":"func","name":"","signature":"def polyvalfromroots(x, r, tensor=True)","tags":["evaluate","polynomial","roots"],"returns":[],"description":"Evaluate a polynomial specified by its roots at points x.","file_path":"numpy/polynomial/polynomial.py:L760"},{"kind":"func","name":"","signature":"def polyval2d(x, y, c)","tags":["evaluate","2D","array-like","coefficients"],"returns":[],"description":"Evaluate a 2-D polynomial at points (x, y).","file_path":"numpy/polynomial/polynomial.py:L848"},{"kind":"func","name":"","signature":"def polygrid2d(x, y, c)","tags":["evaluate","2D","polynomial","Cartesian product","coefficients"],"returns":[],"description":"Evaluate a 2-D polynomial on the Cartesian product of x and y.","file_path":"numpy/polynomial/polynomial.py:L898"},{"kind":"func","name":"","signature":"def polyval3d(x, y, z, c)","tags":["evaluate","3D","polynomial","coefficients","multidimensional"],"returns":[],"description":"Evaluate a 3-D polynomial at points (x, y, z).","file_path":"numpy/polynomial/polynomial.py:L951"},{"kind":"func","name":"","signature":"def polygrid3d(x, y, z, c)","tags":["evaluate","3D","polynomial","Cartesian product","coefficients","array"],"returns":[],"description":"Evaluate a 3-D polynomial on the Cartesian product of x, y and z.","file_path":"numpy/polynomial/polynomial.py:L1002"},{"kind":"func","name":"","signature":"def polyvander(x, deg)","tags":["generate","Vandermonde matrix","polynomial","coefficients"],"returns":[],"description":"","file_path":"numpy/polynomial/polynomial.py:L1058"},{"kind":"func","name":"","signature":"def polyvander2d(x, y, deg)","tags":["vandermonde","degrees","coefficients","polynomial","evaluate"],"returns":[],"description":"","file_path":"numpy/polynomial/polynomial.py:L1112"},{"kind":"func","name":"","signature":"def polyvander3d(x, y, z, deg)","tags":["generate","Vandermonde","3D","polynomial","coefficients"],"returns":[],"description":"Pseudo-Vandermonde matrix of given degrees.","file_path":"numpy/polynomial/polynomial.py:L1160"},{"kind":"func","name":"","signature":"def polyfit(x, y, deg, rcond=None, full=False, w=None)","tags":["fitting","polynomial","least-squares","regression"],"returns":[],"description":"Least-squares fit of a polynomial to data.","file_path":"numpy/polynomial/polynomial.py:L1215"},{"kind":"func","name":"","signature":"def polycompanion(c)","tags":["return","companion","matrix","polynomial","coefficients"],"returns":[],"description":"Return the companion matrix of c.","file_path":"numpy/polynomial/polynomial.py:L1366"},{"kind":"func","name":"","signature":"def polyroots(c)","tags":["compute","polynomial","roots","eigenvalue"],"returns":[],"description":"Compute the roots of a polynomial.","file_path":"numpy/polynomial/polynomial.py:L1406"}]},{"kind":"file","path":"numpy/matrixlib/defmatrix.py","funcs":[{"kind":"func","name":"asmatrix","signature":"def asmatrix(data, dtype)","tags":["matrix","convert","generic"],"returns":["matrix"],"description":"Interpret the input as a matrix.","file_path":"numpy/matrixlib/defmatrix.py:L38"},{"kind":"func","name":"tolist","signature":"def tolist(self)","tags":["matrix","convert","list"],"returns":["list"],"description":"Return the matrix as a (possibly nested) list.","file_path":"numpy/matrixlib/defmatrix.py:L266"},{"kind":"func","name":"sum","signature":"def sum(self, axis, dtype, out)","tags":["matrix","sum","axis"],"returns":["ndarray"],"description":"Returns the sum of the matrix elements, along the given axis.","file_path":"numpy/matrixlib/defmatrix.py:L291"},{"kind":"func","name":"","signature":"def squeeze(self, axis=None)","tags":["reshape","matrix","axis","squeeze"],"returns":[],"description":"Return a possibly reshaped matrix.","file_path":"numpy/matrixlib/defmatrix.py:L325"},{"kind":"func","name":"","signature":"def flatten(self, order='C')","tags":["flatten","copy","matrix manipulation","memory order"],"returns":[],"description":"Return a flattened copy of the matrix.","file_path":"numpy/matrixlib/defmatrix.py:L378"},{"kind":"func","name":"","signature":"def mean(self, axis=None, dtype=None, out=None)","tags":["calculate","average","matrix","axis"],"returns":[],"description":"Returns the average of the matrix elements along the given axis.","file_path":"numpy/matrixlib/defmatrix.py:L415"},{"kind":"func","name":"","signature":"def std(self, axis=None, dtype=None, out=None, ddof=0)","tags":["calculate","deviation","statistics","matrix"],"returns":[],"description":"Return the standard deviation of the array elements along the given axis.","file_path":"numpy/matrixlib/defmatrix.py:L449"},{"kind":"func","name":"","signature":"def var(self, axis=None, dtype=None, out=None, ddof=0)","tags":["calculate","variance","matrix","statistics"],"returns":[],"description":"Returns the variance of the matrix elements, along the given axis.","file_path":"numpy/matrixlib/defmatrix.py:L483"},{"kind":"func","name":"","signature":"def prod(self, axis=None, dtype=None, out=None)","tags":["multiply","axis","matrix","ndarray"],"returns":[],"description":"Return the product of the array elements over the given axis.","file_path":"numpy/matrixlib/defmatrix.py:L517"},{"kind":"func","name":"","signature":"def any(self, axis=None, out=None)","tags":["test","array element","or","axis"],"returns":[],"description":"Test whether any array element along a given axis evaluates to True.","file_path":"numpy/matrixlib/defmatrix.py:L550"},{"kind":"func","name":"","signature":"def all(self, axis=None, out=None)","tags":["test","evaluate","matrix","axis","and"],"returns":[],"description":"Test whether all matrix elements along a given axis evaluate to True.","file_path":"numpy/matrixlib/defmatrix.py:L573"},{"kind":"func","name":"max","signature":"def max(self, axis, out)","tags":["matrix","max","axis"],"returns":["ndarray"],"description":"Return the maximum value along an axis.","file_path":"numpy/matrixlib/defmatrix.py:L613"},{"kind":"func","name":"","signature":"def max(self, axis=None, out=None)","tags":["find-max","axis","computation","matrix-operation"],"returns":[],"description":"Return the maximum value along an axis.","file_path":"numpy/matrixlib/defmatrix.py:L613"},{"kind":"func","name":"","signature":"def argmax(self, axis=None, out=None)","tags":["maximum values","axis","matrix object"],"returns":[],"description":"Indexes of the maximum values along an axis.","file_path":"numpy/matrixlib/defmatrix.py:L648"},{"kind":"func","name":"","signature":"def min(self, axis=None, out=None)","tags":["return-minimum","axis","ndarray","matrix","object"],"returns":[],"description":"Return the minimum value along an axis.","file_path":"numpy/matrixlib/defmatrix.py:L687"},{"kind":"func","name":"","signature":"def argmin(self, axis=None, out=None)","tags":["index-min","axis","matrix","ndarray"],"returns":[],"description":"Indexes of the minimum values along an axis.","file_path":"numpy/matrixlib/defmatrix.py:L722"},{"kind":"func","name":"","signature":"def ptp(self, axis=None, out=None)","tags":["calculate","range","matrix","statistics"],"returns":[],"description":"Peak-to-peak (maximum - minimum) value along the given axis.","file_path":"numpy/matrixlib/defmatrix.py:L761"},{"kind":"func","name":"","signature":"def ravel(self, order='C')","tags":["flatten","matrix","order","copy"],"returns":[],"description":"Return a flattened matrix.","file_path":"numpy/matrixlib/defmatrix.py:L899"},{"kind":"func","name":"","signature":"def bmat(obj, ldict=None, gdict=None)","tags":["build","manipulate","matrix","block-matrix"],"returns":[],"description":"Build a matrix object from a string, nested sequence, or array.","file_path":"numpy/matrixlib/defmatrix.py:L1038"}]}]}